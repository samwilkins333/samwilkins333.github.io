{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Types_1 = require(\"./Types\");\n\nvar BatcherAgent =\n/** @class */\nfunction () {\n  function BatcherAgent(input) {\n    this.input = input;\n  }\n\n  Object.defineProperty(BatcherAgent.prototype, \"length\", {\n    get: function () {\n      return this.input.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  BatcherAgent.prototype.fixedBatch = function (batcher) {\n    var batches = [];\n    var length = this.length;\n    var i = 0;\n\n    if (\"batchSize\" in batcher) {\n      var batchSize = batcher.batchSize;\n\n      while (i < length) {\n        var cap = Math.min(i + batchSize, length);\n        batches.push(this.input.slice(i, i = cap));\n      }\n    } else if (\"batchCount\" in batcher) {\n      var batchCount = batcher.batchCount,\n          mode = batcher.mode;\n      var resolved = mode || Types_1.Mode.Balanced;\n\n      if (batchCount < 1) {\n        throw new Error(\"Batch count must be a positive integer!\");\n      }\n\n      if (batchCount === 1) {\n        return [this.input];\n      }\n\n      if (batchCount >= length) {\n        return this.input.map(function (element) {\n          return [element];\n        });\n      }\n\n      var size = void 0;\n\n      if (length % batchCount === 0) {\n        size = Math.floor(length / batchCount);\n\n        while (i < length) {\n          batches.push(this.input.slice(i, i += size));\n        }\n      } else if (resolved === Types_1.Mode.Balanced) {\n        while (i < length) {\n          size = Math.ceil((length - i) / batchCount--);\n          batches.push(this.input.slice(i, i += size));\n        }\n      } else {\n        batchCount--;\n        size = Math.floor(length / batchCount);\n\n        if (length % size === 0) {\n          size--;\n        }\n\n        while (i < size * batchCount) {\n          batches.push(this.input.slice(i, i += size));\n        }\n\n        batches.push(this.input.slice(size * batchCount));\n      }\n    }\n\n    return batches;\n  };\n\n  BatcherAgent.prototype.predicateBatch = function (batcher) {\n    var batches = [];\n    var batch = [];\n    var executor = batcher.executor,\n        initial = batcher.initial;\n    var accumulator = initial;\n\n    for (var _i = 0, _a = this.input; _i < _a.length; _i++) {\n      var element = _a[_i];\n\n      var _b = executor(element, accumulator),\n          updatedAccumulator = _b.updatedAccumulator,\n          createNewBatch = _b.createNewBatch;\n\n      accumulator = updatedAccumulator;\n\n      if (!createNewBatch) {\n        batch.push(element);\n      } else {\n        batches.push(batch);\n        batch = [element];\n      }\n    }\n\n    batches.push(batch);\n    return batches;\n  };\n\n  BatcherAgent.prototype.predicateBatchAsync = function (batcher) {\n    return __awaiter(this, void 0, void 0, function () {\n      var batches, batch, executorAsync, initial, accumulator, _i, _a, element, _b, updatedAccumulator, createNewBatch;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            batches = [];\n            batch = [];\n            executorAsync = batcher.executorAsync, initial = batcher.initial;\n            accumulator = initial;\n            _i = 0, _a = this.input;\n            _c.label = 1;\n\n          case 1:\n            if (!(_i < _a.length)) return [3\n            /*break*/\n            , 4];\n            element = _a[_i];\n            return [4\n            /*yield*/\n            , executorAsync(element, accumulator)];\n\n          case 2:\n            _b = _c.sent(), updatedAccumulator = _b.updatedAccumulator, createNewBatch = _b.createNewBatch;\n            accumulator = updatedAccumulator;\n\n            if (!createNewBatch) {\n              batch.push(element);\n            } else {\n              batch.length && batches.push(batch);\n              batch = [element];\n            }\n\n            _c.label = 3;\n\n          case 3:\n            _i++;\n            return [3\n            /*break*/\n            , 1];\n\n          case 4:\n            batches.push(batch);\n            return [2\n            /*return*/\n            , batches];\n        }\n      });\n    });\n  };\n\n  BatcherAgent.prototype.batch = function (batcher) {\n    if (\"executor\" in batcher) {\n      return this.predicateBatch(batcher);\n    } else {\n      return this.fixedBatch(batcher);\n    }\n  };\n\n  return BatcherAgent;\n}();\n\nexports.default = BatcherAgent;","map":null,"metadata":{},"sourceType":"script"}