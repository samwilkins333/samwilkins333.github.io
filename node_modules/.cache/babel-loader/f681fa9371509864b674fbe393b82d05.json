{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar BatcherAgent_1 = require(\"../BatcherAgent/BatcherAgent\");\n\nvar Interval_1 = require(\"./Interval\");\n\nvar BatchedArray =\n/** @class */\nfunction () {\n  function BatchedArray(batches) {\n    this.source = [];\n    this.batches = batches;\n  }\n\n  BatchedArray.from = function (source, batcher) {\n    var copy = Array.from(source);\n    var batched = new BatchedArray(new BatcherAgent_1.default(copy).batch(batcher));\n    batched.source = copy;\n    return batched;\n  };\n\n  BatchedArray.fromAsync = function (source, batcher) {\n    return __awaiter(this, void 0, void 0, function () {\n      var copy, batched, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            copy = Array.from(source);\n            _a = BatchedArray.bind;\n            return [4\n            /*yield*/\n            , new BatcherAgent_1.default(copy).predicateBatchAsync(batcher)];\n\n          case 1:\n            batched = new (_a.apply(BatchedArray, [void 0, _b.sent()]))();\n            batched.source = copy;\n            return [2\n            /*return*/\n            , batched];\n        }\n      });\n    });\n  };\n\n  Object.defineProperty(BatchedArray.prototype, \"batchCount\", {\n    get: function get() {\n      return this.batches.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BatchedArray.prototype, \"elementCount\", {\n    get: function get() {\n      return this.source.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BatchedArray.prototype, \"batchIterator\", {\n    get: function get() {\n      return this.batches[Symbol.iterator]();\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  BatchedArray.prototype.batchedForEach = function (handler) {\n    if (this.batchCount) {\n      var completed = 0;\n\n      for (var _i = 0, _a = this.batches; _i < _a.length; _i++) {\n        var batch = _a[_i];\n        handler(batch, this.context(completed++));\n      }\n    }\n  };\n\n  BatchedArray.prototype.batchedMap = function (converter) {\n    if (!this.batchCount) {\n      return [];\n    }\n\n    var collector = [];\n    var completed = 0;\n\n    for (var _i = 0, _a = this.batches; _i < _a.length; _i++) {\n      var batch = _a[_i];\n      converter(batch, this.context(completed++)).forEach(function (convert) {\n        return collector.push(convert);\n      });\n    }\n\n    return collector;\n  };\n\n  BatchedArray.prototype.batchedForEachAsync = function (handler) {\n    return __awaiter(this, void 0, void 0, function () {\n      var completed, _i, _a, batch;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!this.batchCount) return [3\n            /*break*/\n            , 4];\n            completed = 0;\n            _i = 0, _a = this.batches;\n            _b.label = 1;\n\n          case 1:\n            if (!(_i < _a.length)) return [3\n            /*break*/\n            , 4];\n            batch = _a[_i];\n            return [4\n            /*yield*/\n            , handler(batch, this.context(completed++))];\n\n          case 2:\n            _b.sent();\n\n            _b.label = 3;\n\n          case 3:\n            _i++;\n            return [3\n            /*break*/\n            , 1];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  BatchedArray.prototype.batchedMapAsync = function (converter) {\n    return __awaiter(this, void 0, void 0, function () {\n      var collector, completed, _i, _a, batch;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!this.batchCount) {\n              return [2\n              /*return*/\n              , []];\n            }\n\n            collector = [];\n            completed = 0;\n            _i = 0, _a = this.batches;\n            _b.label = 1;\n\n          case 1:\n            if (!(_i < _a.length)) return [3\n            /*break*/\n            , 4];\n            batch = _a[_i];\n            return [4\n            /*yield*/\n            , converter(batch, this.context(completed++))];\n\n          case 2:\n            _b.sent().forEach(function (convert) {\n              return collector.push(convert);\n            });\n\n            completed++;\n            _b.label = 3;\n\n          case 3:\n            _i++;\n            return [3\n            /*break*/\n            , 1];\n\n          case 4:\n            return [2\n            /*return*/\n            , collector];\n        }\n      });\n    });\n  };\n\n  BatchedArray.prototype.context = function (completed, patient) {\n    if (patient === void 0) {\n      patient = true;\n    }\n\n    return {\n      completedBatches: completed,\n      remainingBatches: this.batchCount - completed,\n      patient: patient\n    };\n  };\n\n  BatchedArray.prototype.batchedForEachNaiveInterval = function (interval, handler) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        if (this.batchCount) {\n          return [2\n          /*return*/\n          , new Promise(function (resolve) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var iterator, dispatched, next;\n\n              var _this = this;\n\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    iterator = this.batchIterator;\n                    dispatched = 0;\n                    return [4\n                    /*yield*/\n                    , new Promise(function (resolve) {\n                      var handle = setInterval(function () {\n                        return __awaiter(_this, void 0, void 0, function () {\n                          return __generator(this, function (_a) {\n                            next = iterator.next();\n\n                            if (!next.done) {\n                              handler(next.value, this.context(++dispatched, false));\n                            } else {\n                              clearInterval(handle);\n                              resolve();\n                            }\n\n                            return [2\n                            /*return*/\n                            ];\n                          });\n                        });\n                      }, Interval_1.Interval.convert(interval));\n                    })];\n\n                  case 1:\n                    _a.sent();\n\n                    resolve();\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            });\n          })];\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  BatchedArray.prototype.batchedForEachPatientInterval = function (interval, handler) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        if (this.batchCount) {\n          return [2\n          /*return*/\n          , new Promise(function (resolve) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var iterator, completed, next;\n\n              var _this = this;\n\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    iterator = this.batchIterator;\n                    completed = 0;\n                    _a.label = 1;\n\n                  case 1:\n                    if (!!(next = iterator.next()).done) return [3\n                    /*break*/\n                    , 3];\n                    return [4\n                    /*yield*/\n                    , new Promise(function (resolve) {\n                      setTimeout(function () {\n                        return __awaiter(_this, void 0, void 0, function () {\n                          return __generator(this, function (_a) {\n                            switch (_a.label) {\n                              case 0:\n                                return [4\n                                /*yield*/\n                                , handler(next.value, this.context(completed++))];\n\n                              case 1:\n                                _a.sent();\n\n                                resolve();\n                                return [2\n                                /*return*/\n                                ];\n                            }\n                          });\n                        });\n                      }, Interval_1.Interval.convert(interval));\n                    })];\n\n                  case 2:\n                    _a.sent();\n\n                    return [3\n                    /*break*/\n                    , 1];\n\n                  case 3:\n                    resolve();\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            });\n          })];\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  BatchedArray.prototype.batchedMapNaiveInterval = function (interval, converter) {\n    return __awaiter(this, void 0, void 0, function () {\n      var collector_1;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        if (this.batchCount) {\n          collector_1 = [];\n          return [2\n          /*return*/\n          , new Promise(function (resolve) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var iterator, dispatched, next;\n\n              var _this = this;\n\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    iterator = this.batchIterator;\n                    dispatched = 0;\n                    return [4\n                    /*yield*/\n                    , new Promise(function (resolve) {\n                      var handle = setInterval(function () {\n                        return __awaiter(_this, void 0, void 0, function () {\n                          var _a, _b, _c;\n\n                          return __generator(this, function (_d) {\n                            switch (_d.label) {\n                              case 0:\n                                next = iterator.next();\n                                if (!!next.done) return [3\n                                /*break*/\n                                , 2];\n                                _b = (_a = collector_1.push).apply;\n                                _c = [collector_1];\n                                return [4\n                                /*yield*/\n                                , converter(next.value, this.context(++dispatched, false))];\n\n                              case 1:\n                                _b.apply(_a, _c.concat([_d.sent()]));\n\n                                return [3\n                                /*break*/\n                                , 3];\n\n                              case 2:\n                                clearInterval(handle);\n                                resolve();\n                                _d.label = 3;\n\n                              case 3:\n                                return [2\n                                /*return*/\n                                ];\n                            }\n                          });\n                        });\n                      }, Interval_1.Interval.convert(interval));\n                    })];\n\n                  case 1:\n                    _a.sent();\n\n                    resolve(collector_1);\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            });\n          })];\n        }\n\n        return [2\n        /*return*/\n        , []];\n      });\n    });\n  };\n\n  BatchedArray.prototype.batchedMapPatientInterval = function (interval, converter) {\n    return __awaiter(this, void 0, void 0, function () {\n      var collector_2;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        if (this.batchCount) {\n          collector_2 = [];\n          return [2\n          /*return*/\n          , new Promise(function (resolve) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var iterator, completed, next;\n\n              var _this = this;\n\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    iterator = this.batchIterator;\n                    completed = 0;\n                    _a.label = 1;\n\n                  case 1:\n                    if (!!(next = iterator.next()).done) return [3\n                    /*break*/\n                    , 3];\n                    return [4\n                    /*yield*/\n                    , new Promise(function (resolve) {\n                      setTimeout(function () {\n                        return __awaiter(_this, void 0, void 0, function () {\n                          var _a, _b, _c;\n\n                          return __generator(this, function (_d) {\n                            switch (_d.label) {\n                              case 0:\n                                _b = (_a = collector_2.push).apply;\n                                _c = [collector_2];\n                                return [4\n                                /*yield*/\n                                , converter(next.value, this.context(completed++))];\n\n                              case 1:\n                                _b.apply(_a, _c.concat([_d.sent()]));\n\n                                resolve();\n                                return [2\n                                /*return*/\n                                ];\n                            }\n                          });\n                        });\n                      }, Interval_1.Interval.convert(interval));\n                    })];\n\n                  case 2:\n                    _a.sent();\n\n                    return [3\n                    /*break*/\n                    , 1];\n\n                  case 3:\n                    resolve(collector_2);\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            });\n          })];\n        }\n\n        return [2\n        /*return*/\n        , []];\n      });\n    });\n  };\n\n  return BatchedArray;\n}();\n\nexports.default = BatchedArray;","map":null,"metadata":{},"sourceType":"script"}