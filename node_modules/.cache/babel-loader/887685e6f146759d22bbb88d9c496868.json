{"ast":null,"code":"import _initializerDefineProperty from \"/Users/swilkinss2012/Documents/GitHub/PersonalWebsiteRework/samwilkins/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/swilkinss2012/Documents/GitHub/PersonalWebsiteRework/samwilkins/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/swilkinss2012/Documents/GitHub/PersonalWebsiteRework/samwilkins/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class,\n    _class2,\n    _descriptor,\n    _descriptor2,\n    _descriptor3,\n    _temp,\n    _jsxFileName = \"/Users/swilkinss2012/Documents/GitHub/PersonalWebsiteRework/samwilkins/src/Main/Main.tsx\";\n\nimport React from 'react';\nimport \"./Main.css\";\nimport { observer } from \"mobx-react\";\nimport MenuBar from '../MenuBar/MenuBar';\nimport { action, observable } from 'mobx';\nimport { ColorScheme } from \"../ColorScheme\";\nimport Repositories from '../Repositories/Repositories';\nimport { ImageMapping } from '../Assets/Assets';\nimport github from \"../Assets/github.png\";\n\nlet Main = observer(_class = (_class2 = (_temp = class Main extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _initializerDefineProperty(this, \"loadManager\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"currentPage\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"selectedRepository\", _descriptor3, this);\n\n    this.setSelected = action(repository => {\n      if (this.selectedRepository) {\n        this.selectedRepository.deselect();\n      }\n\n      this.selectedRepository = repository;\n    });\n    this.onMenuLoaded = action(() => {\n      this.loadManager.MenuLoaded = true;\n    });\n    this.onRepositoriesLoaded = action(() => {\n      this.loadManager.RepositoriesLoaded = true;\n    });\n  }\n\n  render() {\n    const _this$loadManager = this.loadManager,\n          MenuLoaded = _this$loadManager.MenuLoaded,\n          RepositoriesLoaded = _this$loadManager.RepositoriesLoaded;\n    const src = this.selectedRepository ? ImageMapping.get(this.selectedRepository.props.model.id) || github : github;\n    let width = \"70%\";\n    const noContent = src === github;\n\n    if (noContent) {\n      width = \"30%\";\n    }\n\n    const valid = !this.selectedRepository || !noContent;\n    const border = valid ? \"none\" : \"2px solid red\";\n    const borderRadius = noContent ? \"50%\" : undefined;\n    return React.createElement(\"div\", {\n      className: 'outermost',\n      style: {\n        background: MenuLoaded ? ColorScheme.primary : \"white\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(MenuBar, {\n      onLoad: this.onMenuLoaded,\n      transitionDuration: 1500,\n      currentPage: this.currentPage,\n      setCurrentPage: action(page => {\n        this.currentPage = page;\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"body\",\n      style: {\n        opacity: MenuLoaded ? 1 : 0\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: 'image-container',\n      onClick: action(() => this.selectedRepository = undefined),\n      style: {\n        opacity: RepositoriesLoaded ? 1 : 0\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"display\",\n      alt: \"display\",\n      style: {\n        width,\n        border,\n        borderRadius\n      },\n      src: src,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), valid ? null : React.createElement(\"span\", {\n      className: 'unavailable',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"Content Unavailable\")), this.currentPage === 1 ? React.createElement(Repositories, {\n      onLoad: this.onRepositoriesLoaded,\n      setSelected: this.setSelected,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }) : null));\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"loadManager\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {\n      MenuLoaded: false,\n      RepositoriesLoaded: false\n    };\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"currentPage\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return 0;\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, \"selectedRepository\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return undefined;\n  }\n})), _class2)) || _class;\n\nexport { Main as default };","map":{"version":3,"sources":["/Users/swilkinss2012/Documents/GitHub/PersonalWebsiteRework/samwilkins/src/Main/Main.tsx"],"names":["React","observer","MenuBar","action","observable","ColorScheme","Repositories","ImageMapping","github","Main","Component","setSelected","repository","selectedRepository","deselect","onMenuLoaded","loadManager","MenuLoaded","onRepositoriesLoaded","RepositoriesLoaded","render","src","get","props","model","id","width","noContent","valid","border","borderRadius","undefined","background","primary","currentPage","page","opacity"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,YAAP;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAASC,MAAT,EAAiBC,UAAjB,QAAmC,MAAnC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;IASqBC,I,GADpBR,Q,8BAAD,MACqBQ,IADrB,SACkCT,KAAK,CAACU,SADxC,CACsD;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,SAQlDC,WARkD,GAQpCR,MAAM,CAAES,UAAD,IAA4B;AAC7C,UAAI,KAAKC,kBAAT,EAA6B;AACzB,aAAKA,kBAAL,CAAwBC,QAAxB;AACH;;AACD,WAAKD,kBAAL,GAA0BD,UAA1B;AACH,KALmB,CAR8B;AAAA,SAelDG,YAfkD,GAenCZ,MAAM,CAAC,MAAM;AACxB,WAAKa,WAAL,CAAiBC,UAAjB,GAA8B,IAA9B;AACH,KAFoB,CAf6B;AAAA,SAmBlDC,oBAnBkD,GAmB3Bf,MAAM,CAAC,MAAM;AAChC,WAAKa,WAAL,CAAiBG,kBAAjB,GAAsC,IAAtC;AACH,KAF4B,CAnBqB;AAAA;;AAuBlDC,EAAAA,MAAM,GAAG;AAAA,8BACsC,KAAKJ,WAD3C;AAAA,UACGC,UADH,qBACGA,UADH;AAAA,UACeE,kBADf,qBACeA,kBADf;AAEL,UAAME,GAAG,GAAG,KAAKR,kBAAL,GAA0BN,YAAY,CAACe,GAAb,CAAiB,KAAKT,kBAAL,CAAwBU,KAAxB,CAA8BC,KAA9B,CAAoCC,EAArD,KAA4DjB,MAAtF,GAA+FA,MAA3G;AACA,QAAIkB,KAAK,GAAG,KAAZ;AACA,UAAMC,SAAS,GAAGN,GAAG,KAAKb,MAA1B;;AACA,QAAImB,SAAJ,EAAe;AACXD,MAAAA,KAAK,GAAG,KAAR;AACH;;AACD,UAAME,KAAK,GAAG,CAAC,KAAKf,kBAAN,IAA4B,CAACc,SAA3C;AACA,UAAME,MAAM,GAAGD,KAAK,GAAG,MAAH,GAAY,eAAhC;AACA,UAAME,YAAY,GAAGH,SAAS,GAAG,KAAH,GAAWI,SAAzC;AACA,WACI;AACI,MAAA,SAAS,EAAE,WADf;AAEI,MAAA,KAAK,EAAE;AAAEC,QAAAA,UAAU,EAAEf,UAAU,GAAGZ,WAAW,CAAC4B,OAAf,GAAyB;AAAjD,OAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAII,oBAAC,OAAD;AACI,MAAA,MAAM,EAAE,KAAKlB,YADjB;AAEI,MAAA,kBAAkB,EAAE,IAFxB;AAGI,MAAA,WAAW,EAAE,KAAKmB,WAHtB;AAII,MAAA,cAAc,EAAE/B,MAAM,CAAEgC,IAAD,IAAkB;AACrC,aAAKD,WAAL,GAAmBC,IAAnB;AACH,OAFqB,CAJ1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,EAYI;AACI,MAAA,SAAS,EAAE,MADf;AAEI,MAAA,KAAK,EAAE;AACHC,QAAAA,OAAO,EAAEnB,UAAU,GAAG,CAAH,GAAO;AADvB,OAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMI;AACI,MAAA,SAAS,EAAE,iBADf;AAEI,MAAA,OAAO,EAAEd,MAAM,CAAC,MAAM,KAAKU,kBAAL,GAA0BkB,SAAjC,CAFnB;AAGI,MAAA,KAAK,EAAE;AACHK,QAAAA,OAAO,EAAEjB,kBAAkB,GAAG,CAAH,GAAO;AAD/B,OAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOI;AACI,MAAA,SAAS,EAAE,SADf;AAEI,MAAA,GAAG,EAAE,SAFT;AAGI,MAAA,KAAK,EAAE;AAAEO,QAAAA,KAAF;AAASG,QAAAA,MAAT;AAAiBC,QAAAA;AAAjB,OAHX;AAII,MAAA,GAAG,EAAET,GAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPJ,EAaKO,KAAK,GAAG,IAAH,GAAU;AAAM,MAAA,SAAS,EAAE,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAbpB,CANJ,EAqBK,KAAKM,WAAL,KAAqB,CAArB,GAAyB,oBAAC,YAAD;AACtB,MAAA,MAAM,EAAE,KAAKhB,oBADS;AAEtB,MAAA,WAAW,EAAE,KAAKP,WAFI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAzB,GAGI,IAxBT,CAZJ,CADJ;AAyCH;;AA3EiD,C,sFACjDP,U;;;;;WAA8C;AAC3Ca,MAAAA,UAAU,EAAE,KAD+B;AAE3CE,MAAAA,kBAAkB,EAAE;AAFuB,K;;gFAI9Cf,U;;;;;WAAiC,C;;uFACjCA,U;;;;;WAAgE2B,S;;;;SANhDtB,I","sourcesContent":["import React from 'react';\nimport \"./Main.css\";\nimport { observer } from \"mobx-react\";\nimport MenuBar from '../MenuBar/MenuBar';\nimport { action, observable } from 'mobx';\nimport { ColorScheme } from \"../ColorScheme\";\nimport Repositories from '../Repositories/Repositories';\nimport { ImageMapping } from '../Assets/Assets';\nimport github from \"../Assets/github.png\";\nimport Repository from '../Repositories/Repository';\n\ninterface LoadManager {\n    MenuLoaded: boolean;\n    RepositoriesLoaded: boolean;\n}\n\n@observer\nexport default class Main extends React.Component<{}> {\n    @observable private loadManager: LoadManager = {\n        MenuLoaded: false,\n        RepositoriesLoaded: false\n    }\n    @observable private currentPage = 0;\n    @observable private selectedRepository: Repository | undefined = undefined;\n\n    setSelected = action((repository: Repository) => {\n        if (this.selectedRepository) {\n            this.selectedRepository.deselect();\n        }\n        this.selectedRepository = repository;\n    })\n\n    onMenuLoaded = action(() => {\n        this.loadManager.MenuLoaded = true;\n    })\n\n    onRepositoriesLoaded = action(() => {\n        this.loadManager.RepositoriesLoaded = true;\n    });\n\n    render() {\n        const { MenuLoaded, RepositoriesLoaded } = this.loadManager;\n        const src = this.selectedRepository ? ImageMapping.get(this.selectedRepository.props.model.id) || github : github;\n        let width = \"70%\";\n        const noContent = src === github;\n        if (noContent) {\n            width = \"30%\";\n        }\n        const valid = !this.selectedRepository || !noContent;\n        const border = valid ? \"none\" : \"2px solid red\";\n        const borderRadius = noContent ? \"50%\" : undefined;\n        return (\n            <div\n                className={'outermost'}\n                style={{ background: MenuLoaded ? ColorScheme.primary : \"white\" }}\n            >\n                <MenuBar\n                    onLoad={this.onMenuLoaded}\n                    transitionDuration={1500}\n                    currentPage={this.currentPage}\n                    setCurrentPage={action((page: number) => {\n                        this.currentPage = page;\n                    })}\n                />\n                <div\n                    className={\"body\"}\n                    style={{\n                        opacity: MenuLoaded ? 1 : 0,\n                    }}\n                >\n                    <div\n                        className={'image-container'}\n                        onClick={action(() => this.selectedRepository = undefined)}\n                        style={{\n                            opacity: RepositoriesLoaded ? 1 : 0,\n                        }}\n                    >\n                        <img\n                            className={\"display\"}\n                            alt={\"display\"}\n                            style={{ width, border, borderRadius }}\n                            src={src}\n                        />\n                        {valid ? null : <span className={'unavailable'}>Content Unavailable</span>}\n                    </div>\n                    {this.currentPage === 1 ? <Repositories\n                        onLoad={this.onRepositoriesLoaded}\n                        setSelected={this.setSelected}\n                    /> : null}\n                </div>\n            </div>\n        );\n    }\n\n}"]},"metadata":{},"sourceType":"module"}