{"ast":null,"code":"import _initializerDefineProperty from \"/Users/swilkinss2012/Documents/GitHub/PersonalWebsiteRework/samwilkins/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/swilkinss2012/Documents/GitHub/PersonalWebsiteRework/samwilkins/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/swilkinss2012/Documents/GitHub/PersonalWebsiteRework/samwilkins/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class,\n    _class2,\n    _descriptor,\n    _descriptor2,\n    _descriptor3,\n    _descriptor4,\n    _temp,\n    _jsxFileName = \"/Users/swilkinss2012/Documents/GitHub/PersonalWebsiteRework/samwilkins/src/Repositories/Repositories.tsx\";\n\nimport React from 'react';\nimport \"./Repositories.css\";\nimport { observable, runInAction, action } from 'mobx';\nimport { observer } from 'mobx-react';\nimport Repository from './Repository';\nimport { BatchedArray, TimeUnit } from \"array-batcher\";\nimport { ColorScheme } from '../ColorScheme';\nconst username = \"samwilkins333\";\nconst apiEndpoint = \"https://api.github.com/user/repos\";\n\nlet Repositories = observer(_class = (_class2 = (_temp = class Repositories extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _initializerDefineProperty(this, \"repositories\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"background\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"marginTop\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"selectedRepository\", _descriptor4, this);\n\n    this.setSelected = action(repoId => {\n      this.selectedRepository = repoId;\n    });\n\n    this.populate = () => {\n      const headers = {\n        Authorization: \"token \".concat(process.env.REACT_APP_GITHUB_KEY)\n      };\n      fetch(apiEndpoint, {\n        headers\n      }).then(async response => {\n        const repositories = await response.json();\n        const mine = repositories.filter(repo => repo.full_name.startsWith(username));\n        await BatchedArray.from(mine, {\n          batchSize: 1\n        }).batchedForEachNaiveInterval({\n          magnitude: 100,\n          unit: TimeUnit.Milliseconds\n        }, batch => {\n          runInAction(() => this.repositories.push(...batch));\n        });\n        this.props.onLoad();\n        this.marginTop = 3;\n      });\n    };\n\n    this.displayRepositories = () => {\n      return this.repositories.map(repo => React.createElement(Repository, {\n        key: repo.id,\n        model: repo,\n        marginTop: this.marginTop,\n        setSelected: this.setSelected,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }));\n    };\n  }\n\n  componentDidMount() {\n    this.populate();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: 'repositories-container',\n      style: {\n        background: this.background\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, this.displayRepositories());\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"repositories\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"background\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return ColorScheme.primary;\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, \"marginTop\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return 0;\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, \"selectedRepository\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return undefined;\n  }\n})), _class2)) || _class;\n\nexport { Repositories as default };","map":{"version":3,"sources":["/Users/swilkinss2012/Documents/GitHub/PersonalWebsiteRework/samwilkins/src/Repositories/Repositories.tsx"],"names":["React","observable","runInAction","action","observer","Repository","BatchedArray","TimeUnit","ColorScheme","username","apiEndpoint","Repositories","Component","setSelected","repoId","selectedRepository","populate","headers","Authorization","process","env","REACT_APP_GITHUB_KEY","fetch","then","response","repositories","json","mine","filter","repo","full_name","startsWith","from","batchSize","batchedForEachNaiveInterval","magnitude","unit","Milliseconds","batch","push","props","onLoad","marginTop","displayRepositories","map","id","componentDidMount","render","background","primary","undefined"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,oBAAP;AACA,SAASC,UAAT,EAAqBC,WAArB,EAAkCC,MAAlC,QAAgD,MAAhD;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,YAAT,EAAuBC,QAAvB,QAAuC,eAAvC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAIA,MAAMC,QAAQ,GAAG,eAAjB;AACA,MAAMC,WAAW,GAAG,mCAApB;;IAOqBC,Y,GADpBP,Q,8BAAD,MACqBO,YADrB,SAC0CX,KAAK,CAACY,SADhD,CAC6E;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,SAUzEC,WAVyE,GAU3DV,MAAM,CAAEW,MAAD,IAAoB;AACrC,WAAKC,kBAAL,GAA0BD,MAA1B;AACH,KAFmB,CAVqD;;AAAA,SAczEE,QAdyE,GAc9D,MAAM;AACb,YAAMC,OAAO,GAAG;AAAEC,QAAAA,aAAa,kBAAWC,OAAO,CAACC,GAAR,CAAYC,oBAAvB;AAAf,OAAhB;AACAC,MAAAA,KAAK,CAACZ,WAAD,EAAc;AAAEO,QAAAA;AAAF,OAAd,CAAL,CAAgCM,IAAhC,CAAqC,MAAMC,QAAN,IAAkB;AACnD,cAAMC,YAAY,GAAG,MAAMD,QAAQ,CAACE,IAAT,EAA3B;AACA,cAAMC,IAAI,GAAGF,YAAY,CAACG,MAAb,CAAoBC,IAAI,IAAIA,IAAI,CAACC,SAAL,CAAeC,UAAf,CAA0BtB,QAA1B,CAA5B,CAAb;AACA,cAAMH,YAAY,CAAC0B,IAAb,CAAkBL,IAAlB,EAAwB;AAAEM,UAAAA,SAAS,EAAE;AAAb,SAAxB,EAA0CC,2BAA1C,CACF;AAAEC,UAAAA,SAAS,EAAE,GAAb;AAAkBC,UAAAA,IAAI,EAAE7B,QAAQ,CAAC8B;AAAjC,SADE,EAEFC,KAAK,IAAI;AACLpC,UAAAA,WAAW,CAAC,MAAM,KAAKuB,YAAL,CAAkBc,IAAlB,CAAuB,GAAGD,KAA1B,CAAP,CAAX;AACH,SAJC,CAAN;AAMA,aAAKE,KAAL,CAAWC,MAAX;AACA,aAAKC,SAAL,GAAiB,CAAjB;AACH,OAXD;AAYH,KA5BwE;;AAAA,SA8BzEC,mBA9ByE,GA8BnD,MAAM;AACxB,aAAO,KAAKlB,YAAL,CAAkBmB,GAAlB,CAAsBf,IAAI,IAC7B,oBAAC,UAAD;AACI,QAAA,GAAG,EAAEA,IAAI,CAACgB,EADd;AAEI,QAAA,KAAK,EAAEhB,IAFX;AAGI,QAAA,SAAS,EAAE,KAAKa,SAHpB;AAII,QAAA,WAAW,EAAE,KAAK7B,WAJtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADG,CAAP;AAQH,KAvCwE;AAAA;;AAMzEiC,EAAAA,iBAAiB,GAAG;AAChB,SAAK9B,QAAL;AACH;;AAiCD+B,EAAAA,MAAM,GAAG;AACL,WACI;AACI,MAAA,SAAS,EAAE,wBADf;AAEI,MAAA,KAAK,EAAE;AACHC,QAAAA,UAAU,EAAE,KAAKA;AADd,OAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMK,KAAKL,mBAAL,EANL,CADJ;AAUH;;AApDwE,C,uFACxE1C,U;;;;;WAAyC,E;;+EACzCA,U;;;;;WAAgCO,WAAW,CAACyC,O;;8EAC5ChD,U;;;;;WAA+B,C;;uFAC/BA,U;;;;;WAA4DiD,S;;;;SAJ5CvC,Y","sourcesContent":["import React from 'react';\nimport \"./Repositories.css\";\nimport { observable, runInAction, action } from 'mobx';\nimport { observer } from 'mobx-react';\nimport Repository from './Repository';\nimport { BatchedArray, TimeUnit } from \"array-batcher\";\nimport { ColorScheme } from '../ColorScheme';\nimport { ImageMapping } from '../Assets/Assets';\nimport github from \"../Assets/github.png\";\n\nconst username = \"samwilkins333\";\nconst apiEndpoint = \"https://api.github.com/user/repos\";\n\nexport interface RepositoriesProps {\n    onLoad: () => void;\n}\n\n@observer\nexport default class Repositories extends React.Component<RepositoriesProps> {\n    @observable private repositories: any[] = [];\n    @observable private background = ColorScheme.primary;\n    @observable private marginTop = 0;\n    @observable private selectedRepository: number | undefined = undefined;\n\n    componentDidMount() {\n        this.populate();\n    }\n\n    setSelected = action((repoId: number) => {\n        this.selectedRepository = repoId;\n    })\n\n    populate = () => {\n        const headers = { Authorization: `token ${process.env.REACT_APP_GITHUB_KEY}` };\n        fetch(apiEndpoint, { headers }).then(async response => {\n            const repositories = await response.json() as any[];\n            const mine = repositories.filter(repo => repo.full_name.startsWith(username));\n            await BatchedArray.from(mine, { batchSize: 1 }).batchedForEachNaiveInterval(\n                { magnitude: 100, unit: TimeUnit.Milliseconds },\n                batch => {\n                    runInAction(() => this.repositories.push(...batch))\n                }\n            );\n            this.props.onLoad();\n            this.marginTop = 3;\n        });\n    }\n\n    displayRepositories = () => {\n        return this.repositories.map(repo =>\n            <Repository\n                key={repo.id}\n                model={repo}\n                marginTop={this.marginTop}\n                setSelected={this.setSelected}\n            />\n        );\n    }\n\n    render() {\n        return (\n            <div\n                className={'repositories-container'}\n                style={{\n                    background: this.background,\n                }}\n            >\n                {this.displayRepositories()}\n            </div>\n        )\n    }\n\n}"]},"metadata":{},"sourceType":"module"}